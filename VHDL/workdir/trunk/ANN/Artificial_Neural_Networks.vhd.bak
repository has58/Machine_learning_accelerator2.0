Library IEEE;
use IEEE.std_logic_1164.ALL;
use std.textio.ALL;

use work.ANN_package.ALL;

Entity ANN_ON_FPGA is
	generic (rows: integer := 3;
				cols: integer:= 3);
	port (
			clk 	  : in bit;
			dot_pro : out integer);
--			Data 	  : in integer;
--			weights : in integer;
--			result  : out integer_matrix);
	end entity;
	
Architecture ANN_ON_FPGA_arch of ANN_ON_FPGA is
	File data_try  : TEXT open read_mode is "C:\Users\Haider\vlsi2\workdir\trunk\VHDL\file_reader\data_set\data_try.txt"; 
	File data_out1 : TEXT open write_mode is "C:\Users\Haider\vlsi2\workdir\trunk\VHDL\file_reader\data_set\data_out1.txt"; 
	File data_out2 : TEXT open write_mode is "C:\Users\Haider\vlsi2\workdir\trunk\VHDL\file_reader\data_set\data_out2.txt"; 
	File data_try1 : TEXT open read_mode is "C:\Users\Haider\vlsi2\workdir\trunk\VHDL\file_reader\data_set\data_try1.txt";
	signal weights 			: integer_array;
	-- configuration for dot_product to symbols and give them id
--	for DP : dot_product_conf use entity work.ANN_package.dot_product(dot_product_arch);
	begin
		weights <= (4, 3, 5);
		process(clk)
			variable BUF_IN, BUF_OUT : Line;
			variable int_var 			 : integer_array;
			variable data_matrix     : integer_matrix;
			variable N 					 : integer;
--			variable weights			 : integer_array;
			begin
				N :=0;
--				weights := 
				OUTER_lOOP: while (N < 10 and (not endfile(data_try)))
							loop
								readline (data_try, BUF_IN);
								for i in 0 to rows-1
									loop
									read (BUF_IN, int_var(i));
									end loop;
--								DP : dot_product_conf port map (clk,int_var, weights, dot_pro);
								N := N+1;
							end loop OUTER_lOOP;
--				if (clk'event and clk'last_value='0') then
--					for i in 0 to 3
--						loop
--							for j in 0 to 3
--								loop
--								data_matrix(i)(j) := data;
--								end loop;
--						end loop;
--					end if;
			end process;
--		Mul1: Mul port map(data, weights, result); 
	end architecture;